🧠 1. What Is Java?
Java is a general-purpose, class-based, object-oriented programming language designed to have as few implementation dependencies as possible.

Java = Object-Oriented + Platform-Independent + Secure + Robust

⚙️ 2. How Java Works (Behind the Scenes)
Step	Explanation
1. Code	You write .java files using classes and methods.
2. Compilation	javac (Java compiler) converts .java → .class (Bytecode)
3. Execution	JVM (Java Virtual Machine) runs the bytecode on your system

🔁 This makes Java platform-independent – the same .class file can run on Windows, Mac, or Linux via JVM.

📌 3. Key Features of Java (Explained)
Feature	Description
✅ Object-Oriented	Everything in Java is an object, and code is organized using classes
✅ Platform Independent	Thanks to Bytecode + JVM
✅ Robust & Secure	Type-safe, memory-managed, exception handling built-in
✅ Multithreaded	Java supports concurrent tasks via threads
✅ Automatic Memory Management	Garbage Collector handles unused memory
✅ Rich API & Libraries	Thousands of built-in classes (java.util, java.io, etc.)

🧱 4. Java Building Blocks (Theory)
➤ Classes & Objects
Class: Blueprint or template (e.g., Car)

Object: Real-world entity (e.g., HondaCity is an object of class Car)

➤ Methods
Functions inside a class that define behavior.

Example:

java
Copy
Edit
public void startEngine() {
    System.out.println("Engine Started");
}
➤ Variables & Data Types
Variable: Container for data

Data Types:

Primitive: int, double, char, boolean, etc.

Non-primitive: String, Arrays, Classes, Interfaces

➤ Control Statements
Conditional: if, else, switch

Loops: for, while, do-while

➤ Inheritance
Enables one class to inherit properties and methods of another.

Supports code reusability and hierarchy.

➤ Polymorphism
One function behaves differently in different contexts (method overloading/overriding).

➤ Encapsulation
Wrapping data (variables) and code (methods) into a single unit.

Achieved using access modifiers (private, public, protected).

➤ Abstraction
Hides internal implementation and shows only functionality.

Achieved via abstract classes or interfaces.

🔁 5. Java Program Lifecycle
java
Copy
Edit
// Java file: HelloWorld.java
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, Java!");
    }
}
✅ You compile with:

cpp
Copy
Edit
javac HelloWorld.java  // Compiles to HelloWorld.class
java HelloWorld        // Runs it via JVM
📘 6. Real-World Applications of Java
Area	Examples
Android Apps	Kotlin/Java for mobile development
Web Apps	Java EE, Spring Boot
Desktop Apps	JavaFX, Swing
Enterprise Apps	Banking, ERP systems
Embedded Systems	Smartcards, IoT
Big Data & Cloud	Hadoop, Apache Spark (Java API)

🛡️ 7. JVM, JRE, JDK – The Trio
Term	Role
JVM (Java Virtual Machine)	Executes bytecode on any OS
JRE (Java Runtime Environment)	Contains JVM + libraries to run Java programs
JDK (Java Development Kit)	Contains JRE + development tools (like javac)

📌 Summary for You
Java is a language designed to be simple, robust, and portable, and the theory behind it emphasizes object-oriented thinking, platform independence, and a clean execution model using bytecode and the JVM.


 2. Variables, Data Types & Operators in Java
📦 1. Variables in Java
A variable is a name given to a memory location used to store data.

📌 Syntax:
java
Copy
Edit
dataType variableName = value;
🔸 Example:
java
Copy
Edit
int age = 20;
String name = "Shylesh";
🧠 Variables must be declared with a data type in Java.

🧬 2. Data Types in Java
Java has two categories of data types:

🔹 A. Primitive Data Types (8 types)
Data Type	Size	Example
byte	1 byte	byte a = 100;
short	2 bytes	short b = 32000;
int	4 bytes	int age = 20;
long	8 bytes	long population = 100000L;
float	4 bytes	float price = 10.5f;
double	8 bytes	double pi = 3.14159;
char	2 bytes	char grade = 'A';
boolean	1 bit	boolean isJavaFun = true;

🔹 B. Non-Primitive Data Types
Type	Description
String	A sequence of characters
Array	Collection of same data type
Class, Interface, Object	User-defined data structures

⚙️ 3. Type Casting
Converting one data type into another.

🔸 Implicit (Widening):
java
Copy
Edit
int a = 10;
double b = a;  // int to double (safe)
🔸 Explicit (Narrowing):
java
Copy
Edit
double a = 9.8;
int b = (int) a;  // double to int (data loss possible)
➕ 4. Operators in Java
🔹 A. Arithmetic Operators
java
Copy
Edit
+   // Addition
-   // Subtraction
*   // Multiplication
/   // Division
%   // Modulus (remainder)
🔹 B. Relational (Comparison) Operators
java
Copy
Edit
==  // Equal to
!=  // Not equal to
>   // Greater than
<   // Less than
>=  // Greater than or equal to
<=  // Less than or equal to
🔹 C. Logical Operators
java
Copy
Edit
&&  // Logical AND
||  // Logical OR
!   // Logical NOT
🔹 D. Assignment Operators
java
Copy
Edit
=    // Assign
+=   // a += 3 → a = a + 3
-=   // -=, *=, /=, %=
🔹 E. Increment/Decrement
java
Copy
Edit
++a  // Pre-increment
a++  // Post-increment
--a  // Pre-decrement
a--  // Post-decrement
✨ Code Example: Variables and Operators
java
Copy
Edit
public class Main {
    public static void main(String[] args) {
        int a = 10, b = 5;
        int sum = a + b;
        boolean result = (a > b) && (b > 2);

        System.out.println("Sum: " + sum);
        System.out.println("Is a > b and b > 2? " + result);
    }
}
Output:

vbnet
Copy
Edit
Sum: 15
Is a > b and b > 2? true
🧠 Tips:
Java is statically typed, so all variables must be declared with a type.

Use camelCase for variable names (studentName, totalMarks).

Default values: int = 0, boolean = false, String = null.

🔄 What is Type Casting in Java?
Type Casting is the process of converting one data type into another.

🧠 Think of it like pouring milk (data) from a small cup (int) into a bigger glass (double), or vice versa.

🔹 Two Types of Type Casting
1. ✅ Widening Type Casting (Automatic)
Converts a smaller type to a larger type

Safe and automatic (no data loss)

💡 Example:
java
Copy
Edit
int a = 10;
double b = a;  // Automatically converts int → double

System.out.println(b);  // Output: 10.0
From → To
byte → short → int → long → float → double

2. ⚠️ Narrowing Type Casting (Manual)
Converts a larger type to a smaller type

Not automatic → You must write the cast

May cause data loss

💡 Example:
java
Copy
Edit
double x = 9.75;
int y = (int) x;  // You manually cast it

System.out.println(y);  // Output: 9 (decimal is lost)
📋 Real-Life Analogy
Imagine:

You have a bucket of water (double).

Pouring it into a glass (int) may overflow — some water (data) is lost.

But pouring from a glass into a bucket is fine — no data loss.

🧪 Code Example
java
Copy
Edit
public class TypeCastingDemo {
    public static void main(String[] args) {
        int a = 100;
        double b = a;  // widening
        System.out.println("Widening: " + b);  // 100.0

        double x = 9.81;
        int y = (int) x;  // narrowing
        System.out.println("Narrowing: " + y);  // 9
    }
}
🧠 Summary
Type	Direction	Safe?	Example
Widening	Small → Big	✅ Safe	int → double
Narrowing	Big → Small	⚠️ Risky	double → int (needs casting)


